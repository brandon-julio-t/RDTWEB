@page "/ManageParticipants"

@using Microsoft.Extensions.Configuration
@using Microsoft.AspNetCore.Identity
@using RDTWEB.Models

@attribute [Authorize(Roles = "Admin")]

@inject ApplicationDbContext _context
@inject UserManager<IdentityUser> _userManager
@inject IConfiguration _config

<h3>Manage Participants</h3>

<h4>Participants</h4>

<div class="table-responsive">
    <table class="table table-hover">
        <thead>
        <tr>
            <th>ID</th>
            <th>Name</th>
            <th>Email</th>
            <th>Actions</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var user in Users)
        {
            <tr>
                <td class="align-middle">@user.Id</td>
                <td class="align-middle">@user.UserName</td>
                <td class="align-middle">@user.Email</td>
                <td class="align-middle">
                    <button type="button" class="btn btn-danger" @onclick="() => DeleteUser(user)">
                        Delete
                    </button>
                </td>
            </tr>
        }
        </tbody>
    </table>
</div>

<hr/>

<h4>Create Participants</h4>

@if (IsSuccess)
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        @SuccessMessage
        <button type="button" class="close" data-dismiss="alert" aria-label="Close" @onclick="() => IsSuccess = false">
            <span aria-hidden="true">&times;</span>
        </button>
    </div>
}

<EditForm Model="@FormModel" OnSubmit="@CreateUser">
    <div class="form-group">
        <label for="username">Username</label>
        <input @bind-value="FormModel.Username" type="text" class="form-control" id="username" placeholder="Username">
    </div>

    <button type="submit" class="btn btn-primary">Submit</button>
</EditForm>

@code {
    private List<IdentityUser> Users { get; set; } = new();

    private CreateUserForm FormModel { get; } = new();
    private bool IsSuccess { get; set; }
    private string SuccessMessage { get; set; } = "";

    protected override Task OnInitializedAsync()
    {
        Users = _context.AspNetUsers
            .Where(user => user.NormalizedUserName != "ADMIN@EMAIL.COM")
            .ToList();

        return base.OnInitializedAsync();
    }

    private async Task CreateUser()
    {
        var user = new IdentityUser
        {
            UserName = FormModel.Username,
            Email = FormModel.Username,
            EmailConfirmed = true
        };

        FormModel.Username = "";
        IsSuccess = true;
        SuccessMessage = "Create User Success.";

        Users.Add(user);

        await _userManager.CreateAsync(user, _config["DefaultPassword"]);
        await _userManager.AddToRoleAsync(user, "Participant");
    }

    private void DeleteUser(IdentityUser user)
    {
        _userManager.DeleteAsync(user);

        IsSuccess = true;
        SuccessMessage = "Delete User Success.";

        Users.Remove(user);
    }

    public class CreateUserForm
    {
        public string Username { get; set; }
    }

}