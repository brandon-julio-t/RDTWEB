@page "/ManageParticipants"

@using Microsoft.Extensions.Configuration

@attribute [Authorize(Roles = "Admin")]

@inject UserManager<IdentityUser> _userManager
@inject IConfiguration _config

<main class="row">
    <section class="col-7 pr-2">
        <h3>Participants</h3>

        <div class="table-responsive">
            <table class="table table-hover">
                <thead>
                <tr>
                    <th>ID</th>
                    <th>Email</th>
                    <th>Actions</th>
                </tr>
                </thead>
                <tbody>
                <Virtualize Items="Users">
                    <ItemContent>
                        <tr>
                            <td class="align-middle">@context.Id</td>
                            <td class="align-middle">@context.Email</td>
                            <td class="align-middle">
                                <button type="button" class="btn btn-danger" @onclick="() => DeleteUser(context)">Delete</button>
                            </td>
                        </tr>
                    </ItemContent>
                    <Placeholder>
                        <tr>
                            <td colspan="3">
                                <div class="d-flex justify-content-center">
                                  <div class="spinner-border" style="width: 3rem; height: 3rem;" role="status">
                                    <span class="sr-only">Loading...</span>
                                  </div>
                                </div>
                            </td>
                        </tr>
                    </Placeholder>
                </Virtualize>
                </tbody>
            </table>
        </div>
    </section>

    <section class="col-4 pl-2">
        <div style="position: sticky; top: 73px;">
            <h3>Create Participants</h3>

            @if (IsSuccess)
            {
                <div class="alert alert-success alert-dismissible fade show" role="alert">
                    Create User Success.
                    <button type="button" class="close" data-dismiss="alert" aria-label="Close" @onclick="() => IsSuccess = false">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
            }

            @if (IsError)
            {
                <div class="alert alert-danger alert-dismissible fade show" role="alert">
                    Username must not be empty
                    <button type="button" class="close" data-dismiss="alert" aria-label="Close" @onclick="() => IsError = false">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
            }

            <EditForm Model="@FormModel" OnSubmit="@CreateUser">
                <div class="form-group">
                    <label for="username">Username</label>
                    <input @bind-value="FormModel.Username" type="text" class="form-control" id="username" placeholder="Username">
                </div>

                <button type="submit" class="btn btn-primary">Submit</button>
            </EditForm>

        </div>
    </section>
</main>

@code {
    private List<IdentityUser> Users { get; set; } = new();

    private CreateUserForm FormModel { get; } = new();
    private bool IsSuccess { get; set; }
    private bool IsError { get; set; }

    protected override async Task OnInitializedAsync() =>
        Users = (await _userManager.GetUsersInRoleAsync("Participant")).ToList();

    private async Task CreateUser()
    {
        if (FormModel.Username == "")
        {
            IsError = true;
        }

        var user = new IdentityUser
        {
            UserName = FormModel.Username,
            Email = FormModel.Username,
            EmailConfirmed = true
        };

        await _userManager.CreateAsync(user, _config["DefaultPassword"]);
        await _userManager.AddToRoleAsync(user, "Participant");

        Users.Add(user);
        FormModel.Username = "";
        IsSuccess = true;
        StateHasChanged();
    }

    private async Task DeleteUser(IdentityUser user)
    {
        await _userManager.DeleteAsync(user);
        Users.Remove(user);
        StateHasChanged();
    }

    public class CreateUserForm
    {
        public string Username { get; set; }
    }

}