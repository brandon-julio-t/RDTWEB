@page "/TestResults"

@attribute [Authorize(Roles = "Admin, Participant")]

@inject ApplicationDbContext _context
@inject AuthenticationStateProvider _authenticationStateProvider
@inject UserManager<IdentityUser> _userManager

<MudText Class="mb-4" Typo="Typo.h3">Test Result</MudText>

<MudSimpleTable Hover="true" Striped="true">
    <thead>
    <tr>
        <th>Title</th>
        <th>Start At</th>
        <th>End At</th>
        <th>Status</th>
        <th>Actions</th>
    </tr>
    </thead>
    <tbody>
    <Virtualize Items="QuestionSets">
        <tr class="@GetTrClassByStatus(context)">
            <td class="align-middle">@context.Title</td>
            <td class="align-middle">@context.StartAt?.ToString("U")</td>
            <td class="align-middle">@context.EndAt?.ToString("U")</td>
            <td class="align-middle">@context.Status</td>
            <td class="align-middle">
                <MudButton Link="@($"/TestResults/{context.Id}")" Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Details">
                    View Result
                </MudButton>
            </td>
        </tr>
    </Virtualize>
    </tbody>
</MudSimpleTable>

@code {

    private List<QuestionSet> QuestionSets { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        var auth = await _authenticationStateProvider.GetAuthenticationStateAsync();
        var userId = _userManager.GetUserId(auth.User);

        QuestionSets = await _context.QuestionSets
            .Include(questionSet => questionSet.Questions)
            .ThenInclude(question => question.Answers.Where(answer => answer.IsFinalized && answer.UserId == userId))
            .Where(questionSet => questionSet.Questions.All(question => question.Answers.Count > 0))
            .Distinct()
            .OrderByDescending(questionSet => questionSet.StartAt)
            .ToListAsync();

        QuestionSets.ForEach(questionSet => questionSet.UpdateStatusByUserId(userId));
        QuestionSets = QuestionSets.Where(questionSet => questionSet.Status == "Finalized").ToList();
    }

    private static string GetTrClassByStatus(QuestionSet questionSet)
    {
        return questionSet.Status switch { "Ongoing" => "bg-success text-white", _ => "" };
    }

}