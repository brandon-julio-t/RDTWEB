@page "/TestResults/{id?}"

@using Microsoft.AspNetCore.Hosting

@attribute [Authorize(Roles = "Admin, Participant")]

@inject ApplicationDbContext _context
@inject IWebHostEnvironment _env
@inject AuthenticationStateProvider _authenticationStateProvider
@inject UserManager<IdentityUser> _userManager

<h3>@QuestionSet.Title</h3>

<section class="table-responsive">
    <table class="table table-bordered table-hover">
        <tbody>
        <tr>
            <th>Correct Answers</th>
            <td>@CorrectAnswers</td>
        </tr>
        <tr>
            <th>Opinionated Answers</th>
            <td>@OpinionatedAnswers</td>
        </tr>
        <tr>
            <th>Total Questions</th>
            <td>@QuestionSet.Questions.Count</td>
        </tr>
        </tbody>
    </table>
</section>

<section>
    @foreach (var question in QuestionSet.Questions)
    {
        <div class="my-4 p-4 border rounded">
            <p class="font-weight-bold">@question.Body</p>

            @switch (question.Type)
            {
                case "Multiple Choice":
                case "Multiple Answer List":
                    @for (var i = 0; i < question.Choices.Count; i++)
                    {
                        var idx = i;

                        <div class="form-group form-inline">
                            <input disabled checked="@(question.Answer.ChosenIndex == idx)" class="form-check-input" type="checkbox"/>
                            <input disabled value="@question.Choices[idx]" type="text" class="form-control flex-fill" placeholder="Multiple Answer Choice #@(idx + 1)"/>
                        </div>
                    }
                    break;

                case "Boolean (true or false)":
                    <div class="form-group">
                        <div class="form-check form-check-inline">
                            <input disabled checked="@question.Answer.BooleanAnswer" class="form-check-input" type="radio" id="true">
                            <label class="form-check-label" for="true">True</label>
                        </div>
                        <div class="form-check form-check-inline">
                            <input disabled checked="@(!question.Answer.BooleanAnswer)" class="form-check-input" type="radio" id="false">
                            <label class="form-check-label" for="false">False</label>
                        </div>
                    </div>
                    break;

                case "Essay":
                    <div class="form-group">
                        <textarea disabled class="form-control" rows="7">@question.Answer.StringAnswer</textarea>
                    </div>
                    break;

                case "Submit File":
                    <ViewFileInfo FilePath="@question.Answer.StringAnswer"/>
                    break;
            }
        </div>
    }
</section>

<NavLink href="TestResults" class="btn btn-secondary">Back</NavLink>

@code {

    [Parameter]
    public string Id { get; set; }

    private QuestionSet QuestionSet { get; set; }
    private int CorrectAnswers { get; set; }
    private int OpinionatedAnswers { get; set; }

    protected override async Task<Task> OnInitializedAsync()
    {
        var auth = await _authenticationStateProvider.GetAuthenticationStateAsync();
        var userId = _userManager.GetUserId(auth.User);

        QuestionSet = _context.QuestionSets
            .Include(questionSet => questionSet.Questions)
            .ThenInclude(question => question.Answers)
            .AsSplitQuery()
            .Single(questionSet => questionSet.Id.ToString() == Id);

        QuestionSet.Questions.ForEach(question =>
        {
            question.Answer = question.Answers.Single(answer => answer.UserId == userId);

            switch (question.Type)
            {
                case "Multiple Choice":
                case "Multiple Answer List":
                    CorrectAnswers += question.CorrectChoiceIndex == question.Answer.ChosenIndex ? 1 : 0;
                    break;

                case "Boolean (true or false)":
                    CorrectAnswers += question.BooleanAnswer == question.Answer.BooleanAnswer ? 1 : 0;
                    break;

                case "Essay":
                case "Submit File":
                    OpinionatedAnswers++;
                    break;
            }
        });

        return base.OnInitializedAsync();
    }

}