@page "/TestResults/{id?}"
@using Microsoft.AspNetCore.Hosting

@attribute [Authorize(Roles = "Admin, Participant")]

@inject ApplicationDbContext _context
@inject IWebHostEnvironment _env
@inject AuthenticationStateProvider _authenticationStateProvider
@inject UserManager<IdentityUser> _userManager

<h3>@QuestionSet.Title</h3>

<section class="table-responsive">
    <table class="table table-bordered table-hover">
        <tbody>
        <tr>
            <th>Correct Answers</th>
            <td>@CorrectAnswers</td>
        </tr>
        <tr>
            <th>Pending Corrections</th>
            <td>@PendingCorrections</td>
        </tr>
        <tr>
            <th>Total Questions</th>
            <td>@QuestionSet.Questions.Count</td>
        </tr>
        <tr>
            <th>Final Score</th>
            <td>@(Math.Ceiling((double) CorrectAnswers / QuestionSet.Questions.Count * 100))</td>
        </tr>
        </tbody>
    </table>
</section>

<section>
    <Virtualize Items="QuestionSet.Questions">
        <ItemContent>
            <div class="my-4 p-4 border rounded @(context.Answer.IsCorrect switch { null => "", true => "bg-success text-white", _ => "bg-danger text-white" })">
                <p class="font-weight-bold">@context.Body</p>

                @switch (context.Type)
                {
                    case "Multiple Choice":
                    case "Multiple Answer List":
                        @for (var i = 0; i < context.Choices.Count; i++)
                        {
                            var idx = i;

                            <div class="form-group form-inline">
                                <input disabled checked="@(context.Answer.ChosenIndex == idx)" class="form-check-input" type="checkbox"/>
                                <input disabled value="@context.Choices[idx]" type="text" class="form-control flex-fill" placeholder="Multiple Answer Choice #@(idx + 1)"/>
                            </div>
                        }
                        break;

                    case "Boolean (true or false)":
                        <div class="form-group">
                            <div class="form-check form-check-inline">
                                <input disabled checked="@context.Answer.BooleanAnswer" class="form-check-input" type="radio" id="true">
                                <label class="form-check-label" for="true">True</label>
                            </div>
                            <div class="form-check form-check-inline">
                                <input disabled checked="@(!context.Answer.BooleanAnswer)" class="form-check-input" type="radio" id="false">
                                <label class="form-check-label" for="false">False</label>
                            </div>
                        </div>
                        break;

                    case "Essay":
                        <div class="form-group">
                            <textarea disabled class="form-control" rows="7">@context.Answer.StringAnswer</textarea>
                        </div>
                        break;

                    case "Submit File":
                        <ViewFileInfo FilePath="@context.Answer.StringAnswer"/>
                        break;
                }
            </div>
        </ItemContent>
        <Placeholder>
            <div class="d-flex justify-content-center">
                <div class="spinner-border" style="width: 3rem; height: 3rem;" role="status">
                    <span class="sr-only">Loading...</span>
                </div>
            </div>
        </Placeholder>
    </Virtualize>
</section>

<NavLink href="TestResults" class="btn btn-secondary">Back</NavLink>

@code {

    [Parameter]
    public string Id { get; set; }

    private QuestionSet QuestionSet { get; set; } = new();
    private int CorrectAnswers { get; set; }
    private int PendingCorrections { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var auth = await _authenticationStateProvider.GetAuthenticationStateAsync();
        var userId = _userManager.GetUserId(auth.User);

        QuestionSet = await _context.QuestionSets
            .Include(questionSet => questionSet.Questions.OrderByDescending(question => question.Id))
            .ThenInclude(question => question.Answers)
            .SingleOrDefaultAsync(questionSet => questionSet.Id.ToString() == Id);

        QuestionSet.Questions.ForEach(question =>
        {
            question.Answer = question.Answers.SingleOrDefault(answer => answer.UserId == userId);

            if (question.Answer == null)
            {
                question.Answer = new Answer {IsCorrect = false};
                return;
            }

            switch (question.Type)
            {
                case "Multiple Choice":
                case "Multiple Answer List":
                    var isChoiceCorrect = question.CorrectChoiceIndex == question.Answer.ChosenIndex;
                    CorrectAnswers += isChoiceCorrect ? 1 : 0;
                    question.Answer.IsCorrect = isChoiceCorrect;
                    break;

                case "Boolean (true or false)":
                    var isBooleanCorrect = question.BooleanAnswer == question.Answer.BooleanAnswer;
                    CorrectAnswers += isBooleanCorrect ? 1 : 0;
                    question.Answer.IsCorrect = isBooleanCorrect;
                    break;

                case "Essay":
                case "Submit File":
                    if (question.Answer.IsCorrect == null)
                    {
                        PendingCorrections++;
                    }

                    CorrectAnswers += question.Answer.IsCorrect == true ? 1 : 0;
                    break;
            }
        });
    }

}