@page "/TestAnswer/{id?}"
@using Microsoft.AspNetCore.Hosting

@attribute [Authorize(Roles = "Admin, Participant")]

@inject ApplicationDbContext _context
@inject AuthenticationStateProvider _authenticationStateProvider
@inject UserManager<IdentityUser> _userManager
@inject IWebHostEnvironment _env
@inject IJSRuntime _jsRuntime

<MudText Class="mb-4" Typo="Typo.h3">Information</MudText>

<ServerTime/>

<MudSimpleTable Hover="true" Striped="true">
    <tbody>
    <tr>
        <th>Title</th>
        <td>@QuestionSet.Title</td>
    </tr>
    <tr>
        <th>Start At</th>
        <td>@QuestionSet.StartAt?.ToString("U")</td>
    </tr>
    <tr>
        <th>End At</th>
        <td>@QuestionSet.EndAt?.ToString("U")</td>
    </tr>
    </tbody>
</MudSimpleTable>

@{
    var n = 0;
    var lim = QuestionSet.Questions.Count;
}

<Virtualize Items="QuestionSet.Questions">
    <MudPaper Class="my-4 p-4">
        <MudText Class="mb-4" Typo="Typo.body1">@(n++ % lim + 1). <b>@context.Body</b></MudText>

        @switch (context.Type)
        {
            case "Multiple Choice":
            case "Multiple Answer List":
                @for (var j = 0; j < context.Choices.Count; j++)
                {
                    var idx = j;

                    @if (context.Answer.IsFinalized)
                    {
                        <div class="form-group form-inline">
                            <input disabled checked="@(context.Answer.ChosenIndex == idx)" class="form-check-input" type="checkbox"/>
                            <input disabled value="@context.Choices[idx]" type="text" class="form-control flex-fill" placeholder="Multiple Answer Choice #@(idx + 1)"/>
                        </div>
                    }
                    else
                    {
                        <div class="form-group form-inline">
                            <input @onchange="() => SaveIndex(context.Answer, idx)" checked="@(context.Answer.ChosenIndex == idx)" class="form-check-input" type="checkbox"/>
                            <input disabled value="@context.Choices[idx]" type="text" class="form-control flex-fill" placeholder="Multiple Answer Choice #@(idx + 1)"/>
                        </div>
                    }
                }
                break;

            case "Boolean (true or false)":
                @if (context.Answer.IsFinalized)
                {
                    <div class="form-group">
                        <div class="form-check form-check-inline">
                            <input disabled checked="@context.Answer.BooleanAnswer" class="form-check-input" type="radio" id="true">
                            <label class="form-check-label" for="true">True</label>
                        </div>
                        <div class="form-check form-check-inline">
                            <input disabled checked="@(!context.Answer.BooleanAnswer)" class="form-check-input" type="radio" id="false">
                            <label class="form-check-label" for="false">False</label>
                        </div>
                    </div>
                }
                else
                {
                    <div class="form-group">
                        <div class="form-check form-check-inline">
                            <input @onchange="() => SaveBoolean(context.Answer, true)" checked="@context.Answer.BooleanAnswer" class="form-check-input" type="radio" id="true">
                            <label class="form-check-label" for="true">True</label>
                        </div>
                        <div class="form-check form-check-inline">
                            <input @onchange="() => SaveBoolean(context.Answer, false)" checked="@(!context.Answer.BooleanAnswer)" class="form-check-input" type="radio" id="false">
                            <label class="form-check-label" for="false">False</label>
                        </div>
                    </div>
                }
                break;

            case "Essay":
                <InputEssay Answer="@context.Answer"/>
                break;

            case "Submit File":
                <InputFileUploader Answer="@context.Answer" OnUploaded="StateHasChanged"/>
                <ViewFileInfo FilePath="@context.Answer.StringAnswer"/>
                break;
        }
    </MudPaper>
</Virtualize>

<MudGrid>
    <MudItem>
        @if (IsFinalized)
        {
            <MudButton Disabled="true" Variant="Variant.Filled" Color="Color.Success">Finalized</MudButton>
        }
        else
        {
            <MudButton OnClick="OnFinalizeAnswers" Disabled="@IsFinalizing" Variant="Variant.Filled" Color="Color.Success" StartIcon="@Icons.Material.Filled.Done">
                @(IsFinalizing ? "Finalizing Answers..." : "Finalize Answers")
            </MudButton>
        }
    </MudItem>
    <MudItem>
        <MudButton Link="TestSchedules" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.ArrowBack">
            Back
        </MudButton>
    </MudItem>
</MudGrid>

@code {

    [Parameter]
    public string Id { get; set; }

    private QuestionSet QuestionSet { get; set; } = new();

    private bool IsFinalizing { get; set; }

    private bool IsFinalized => QuestionSet.Questions.All(question => question.Answer.IsFinalized);

    protected override async Task OnInitializedAsync()
    {
        var state = await _authenticationStateProvider.GetAuthenticationStateAsync();
        var userId = _userManager.GetUserId(state.User);

        QuestionSet = await _context.QuestionSets
            .Include(questionSet => questionSet.Questions.OrderBy(question => question.Id))
            .ThenInclude(question => question.Answers.Where(answer => answer.UserId == userId))
            .Where(questionSet => questionSet.StartAt <= DateTime.Now)
            .Where(questionSet => questionSet.EndAt >= DateTime.Now)
            .SingleOrDefaultAsync(questionSet => questionSet.Id.ToString() == Id) ?? new QuestionSet();

        QuestionSet?.Questions
            .ForEach(question =>
                question.Answer = question.Answers
                    .SingleOrDefault(answer => answer.UserId == userId)
                                  ?? new Answer {UserId = userId, QuestionId = question.Id});
    }

    private async Task SaveIndex(Answer answer, int idx)
    {
        answer.ChosenIndex = idx;
        await SaveOrUpdateAnswer(answer);
    }

    private async Task SaveBoolean(Answer answer, bool boolean)
    {
        answer.BooleanAnswer = boolean;
        await SaveOrUpdateAnswer(answer);
    }

    private async Task SaveOrUpdateAnswer(Answer answer)
    {
        try
        {
            await _context.AddAsync(answer);
            await _context.SaveChangesAsync();
        }
        catch (Exception)
        {
    // Entity exists, update it instead.
            _context.Update(answer);
            await _context.SaveChangesAsync();
        }
    }

    private async Task OnFinalizeAnswers()
    {
        var confirmed = await _jsRuntime.InvokeAsync<bool>("confirm", "Are you sure?");
        if (!confirmed) return;

        IsFinalizing = true;

        QuestionSet.Questions.Select(question => question.Answer)
            .ToList()
            .ForEach(answer =>
            {
                answer.IsFinalized = true;

                try
                {
                    _context.Add(answer);
                    _context.SaveChanges();
                }
                catch (Exception)
                {
    // Entity exists, update it instead.
                    _context.Update(answer);
                    _context.SaveChanges();
                }
            });

        IsFinalizing = false;
        StateHasChanged();
    }

}