@page "/TestAnswer/{id?}"

@using Microsoft.AspNetCore.Hosting
@using System.IO

@attribute [Authorize(Roles = "Admin, Participant")]

@inject ApplicationDbContext _context
@inject AuthenticationStateProvider _authenticationStateProvider
@inject UserManager<IdentityUser> _userManager
@inject IWebHostEnvironment _env

<h3>Information</h3>

<ServerTime/>

<div class="table-responsive">
    <table class="table table-bordered table-hover">
        <tbody>
        <tr>
            <th>Title</th>
            <td>@QuestionSet.Title</td>
        </tr>
        <tr>
            <th>Start At</th>
            <td>@QuestionSet.StartAt</td>
        </tr>
        <tr>
            <th>End At</th>
            <td>@QuestionSet.EndAt</td>
        </tr>
        </tbody>
    </table>
</div>

<section>
    @for (var i = 0; i < QuestionSet.Questions.Count; i++)
    {
        var question = QuestionSet.Questions[i];

        <div class="my-4 p-4 border rounded">
            <p>
                @(i + 1).
                <span class="font-weight-bold">@question.Body</span>
            </p>

            @switch (question.Type)
            {
                case "Multiple Choice":
                case "Multiple Answer List":
                    @for (var j = 0; j < question.Choices.Count; j++)
                    {
                        var idx = j;

                        <div class="form-group form-inline">
                            <input @onchange="() => SaveIndex(question.Answer, idx)" checked="@(question.Answer.ChosenIndex == idx)" class="form-check-input" type="checkbox"/>
                            <input disabled value="@question.Choices[idx]" type="text" class="form-control flex-fill" placeholder="Multiple Answer Choice #@(idx + 1)"/>
                        </div>
                    }
                    break;

                case "Boolean (true or false)":
                    <div class="form-group">
                        <div class="form-check form-check-inline">
                            <input @onchange="() => SaveBoolean(question.Answer, true)" checked="@question.Answer.BooleanAnswer" class="form-check-input" type="radio" id="true">
                            <label class="form-check-label" for="true">True</label>
                        </div>
                        <div class="form-check form-check-inline">
                            <input @onchange="() => SaveBoolean(question.Answer, false)" checked="@(!question.Answer.BooleanAnswer)" class="form-check-input" type="radio" id="false">
                            <label class="form-check-label" for="false">False</label>
                        </div>
                    </div>
                    break;

                case "Essay":
                    <div class="form-group">
                        <textarea @bind="question.Answer.StringAnswer" class="form-control" rows="7"></textarea>
                    </div>
                    <button @onclick="() => SaveEssay(question.Answer)" class="btn btn-primary">Save</button>
                    break;

                case "Submit File":
                    <div class="form-group">
                        <InputFile OnChange="e => SaveFile(question.Answer, e.File)" class="form-control-file"/>
                    </div>

                    <ViewFileInfo FilePath="@question.Answer.StringAnswer"/>
                    break;
            }
        </div>
    }
</section>

<NavLink href="TestSchedules" class="btn btn-secondary">Back</NavLink>

@code {

    [Parameter]
    public string Id { get; set; }

    private QuestionSet QuestionSet { get; set; }

    protected override async Task<Task> OnInitializedAsync()
    {
        var state = await _authenticationStateProvider.GetAuthenticationStateAsync();
        var userId = _userManager.GetUserId(state.User);

        QuestionSet = _context.QuestionSets
            .Include(questionSet => questionSet.Questions.OrderBy(question => question.Id))
            .ThenInclude(question => question.Answers.Where(answer => answer.UserId == userId))
            .AsSplitQuery()
            .Single(questionSet => questionSet.Id.ToString() == Id);

        QuestionSet.Questions
            .ForEach(question =>
                question.Answer = question.Answers
                    .SingleOrDefault(answer => answer.UserId == userId)
                                  ?? new Answer {UserId = userId, QuestionId = question.Id});

        return base.OnInitializedAsync();
    }

    private void SaveIndex(Answer answer, int idx)
    {
        answer.ChosenIndex = idx;
        SaveOrUpdateAnswer(answer);
    }

    private void SaveBoolean(Answer answer, bool boolean)
    {
        answer.BooleanAnswer = boolean;
        SaveOrUpdateAnswer(answer);
    }

    private void SaveEssay(Answer answer)
    {
        SaveOrUpdateAnswer(answer);
    }

    private async Task SaveFile(Answer answer, IBrowserFile browserFile)
    {
        var previousPath = answer.StringAnswer;

        var name = browserFile.Name;
        var extension = name[name.LastIndexOf(".", StringComparison.Ordinal)..];

        var path = Path.Combine("Storage", "Answers", Path.GetRandomFileName() + extension);
        await using var file = File.Create(path);
        file.Seek(0, SeekOrigin.Begin);
        await browserFile.OpenReadStream(512000000).CopyToAsync(file);

        answer.StringAnswer = path;
        SaveOrUpdateAnswer(answer);

        if (string.IsNullOrWhiteSpace(previousPath))
            return;

        var absolutePath = Path.Combine(_env.ContentRootPath, previousPath);
        File.Delete(absolutePath);
    }

    private void SaveOrUpdateAnswer(Answer answer)
    {
        try
        {
            _context.Add(answer);
            _context.SaveChanges();
        }
        catch (Exception)
        {
    // Entity exists, update it instead.
            _context.Update(answer);
            _context.SaveChanges();
        }
    }

}