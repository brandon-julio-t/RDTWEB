@page "/TestAnswer/{id?}"
@using Microsoft.AspNetCore.Hosting

@attribute [Authorize(Roles = "Admin, Participant")]

@inject ApplicationDbContext _context
@inject AuthenticationStateProvider _authenticationStateProvider
@inject UserManager<IdentityUser> _userManager
@inject IWebHostEnvironment _env
@inject IJSRuntime _jsRuntime

<h3>Information</h3>

<ServerTime/>

<div class="table-responsive">
    <table class="table table-bordered table-hover">
        <tbody>
        <tr>
            <th>Title</th>
            <td>@QuestionSet.Title</td>
        </tr>
        <tr>
            <th>Start At</th>
            <td>@QuestionSet.StartAt</td>
        </tr>
        <tr>
            <th>End At</th>
            <td>@QuestionSet.EndAt</td>
        </tr>
        </tbody>
    </table>
</div>

<section>
    @for (var i = 0; i < QuestionSet.Questions.Count; i++)
    {
        var question = QuestionSet.Questions[i];

        <div class="my-4 p-4 border rounded">
            <p>
                @(i + 1).
                <span class="font-weight-bold">@question.Body</span>
            </p>

            @switch (question.Type)
            {
                case "Multiple Choice":
                case "Multiple Answer List":
                    @for (var j = 0; j < question.Choices.Count; j++)
                    {
                        var idx = j;

                        @if (question.Answer.IsFinalized)
                        {
                            <div class="form-group form-inline">
                                <input disabled checked="@(question.Answer.ChosenIndex == idx)" class="form-check-input" type="checkbox"/>
                                <input disabled value="@question.Choices[idx]" type="text" class="form-control flex-fill" placeholder="Multiple Answer Choice #@(idx + 1)"/>
                            </div>
                        }
                        else
                        {
                            <div class="form-group form-inline">
                                <input @onchange="() => SaveIndex(question.Answer, idx)" checked="@(question.Answer.ChosenIndex == idx)" class="form-check-input" type="checkbox"/>
                                <input disabled value="@question.Choices[idx]" type="text" class="form-control flex-fill" placeholder="Multiple Answer Choice #@(idx + 1)"/>
                            </div>
                        }
                    }
                    break;

                case "Boolean (true or false)":
                    @if (question.Answer.IsFinalized)
                    {
                        <div class="form-group">
                            <div class="form-check form-check-inline">
                                <input disabled checked="@question.Answer.BooleanAnswer" class="form-check-input" type="radio" id="true">
                                <label class="form-check-label" for="true">True</label>
                            </div>
                            <div class="form-check form-check-inline">
                                <input disabled checked="@(!question.Answer.BooleanAnswer)" class="form-check-input" type="radio" id="false">
                                <label class="form-check-label" for="false">False</label>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="form-group">
                            <div class="form-check form-check-inline">
                                <input @onchange="() => SaveBoolean(question.Answer, true)" checked="@question.Answer.BooleanAnswer" class="form-check-input" type="radio" id="true">
                                <label class="form-check-label" for="true">True</label>
                            </div>
                            <div class="form-check form-check-inline">
                                <input @onchange="() => SaveBoolean(question.Answer, false)" checked="@(!question.Answer.BooleanAnswer)" class="form-check-input" type="radio" id="false">
                                <label class="form-check-label" for="false">False</label>
                            </div>
                        </div>
                    }
                    break;

                case "Essay":
                    <InputEssay Answer="@question.Answer"/>
                    break;

                case "Submit File":
                    <InputFileUploader Answer="@question.Answer" OnUploaded="StateHasChanged"/>
                    <ViewFileInfo FilePath="@question.Answer.StringAnswer"/>
                    break;
            }
        </div>
    }
</section>

@if (IsFinalized)
{
    <button disabled class="btn btn-success disabled">
        Finalized
    </button>
}
else
{
    <button @onclick="OnFinalizeAnswers" disabled="@IsFinalizing" class="btn btn-success">
        @if (IsFinalizing)
        {
            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
        }
        Finalize Answers
    </button>
}

<NavLink href="TestSchedules" class="btn btn-secondary">Back</NavLink>

@code {

    [Parameter]
    public string Id { get; set; }

    private QuestionSet QuestionSet { get; set; } = new();

    private bool IsFinalizing { get; set; }

    private bool IsFinalized => QuestionSet.Questions.All(question => question.Answer.IsFinalized);

    protected override async Task OnInitializedAsync()
    {
        var state = await _authenticationStateProvider.GetAuthenticationStateAsync();
        var userId = _userManager.GetUserId(state.User);

        QuestionSet = await _context.QuestionSets
            .Include(questionSet => questionSet.Questions.OrderBy(question => question.Id))
            .ThenInclude(question => question.Answers.Where(answer => answer.UserId == userId))
            .SingleOrDefaultAsync(questionSet => questionSet.Id.ToString() == Id);

        QuestionSet.Questions
            .ForEach(question =>
                question.Answer = question.Answers
                    .SingleOrDefault(answer => answer.UserId == userId)
                                  ?? new Answer {UserId = userId, QuestionId = question.Id});
    }

    private async Task SaveIndex(Answer answer, int idx)
    {
        answer.ChosenIndex = idx;
        await SaveOrUpdateAnswer(answer);
    }

    private async Task SaveBoolean(Answer answer, bool boolean)
    {
        answer.BooleanAnswer = boolean;
        await SaveOrUpdateAnswer(answer);
    }

    private async Task SaveOrUpdateAnswer(Answer answer)
    {
        try
        {
            await _context.AddAsync(answer);
            await _context.SaveChangesAsync();
        }
        catch (Exception)
        {
    // Entity exists, update it instead.
            _context.Update(answer);
            await _context.SaveChangesAsync();
        }
    }

    private async Task OnFinalizeAnswers()
    {
        var confirmed = await _jsRuntime.InvokeAsync<bool>("confirm", "Are you sure?");
        if (!confirmed) return;

        IsFinalizing = true;

        QuestionSet.Questions.Select(question => question.Answer)
            .ToList()
            .ForEach(answer =>
            {
                answer.IsFinalized = true;

                try
                {
                    _context.Add(answer);
                    _context.SaveChanges();
                }
                catch (Exception)
                {
    // Entity exists, update it instead.
                    _context.Update(answer);
                    _context.SaveChanges();
                }
            });

        IsFinalizing = false;
        StateHasChanged();
    }

}