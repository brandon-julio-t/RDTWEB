@page "/ManageSchedules"

@attribute [Authorize(Roles = "Admin")]

@using RDTWEB.Models
@using RDTWEB.ViewModels

@inject ApplicationDbContext Context

<h3>Manage Schedules</h3>

<div class="table-responsive">
    <table class="table table-hover">
        <thead>
            <tr>
                <th>ID</th>
                <th>Title</th>
                <th>Start At</th>
                <th>End At</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var vm in QuestionSetViewModels)
            {
                <tr>
                    <td class="align-middle">@vm.QuestionSet.Id</td>
                    <td class="align-middle">@vm.QuestionSet.Title</td>
                    @if (vm.IsEditing)
                    {
                        <td class="align-middle">
                            <input @bind="vm.QuestionSet.StartAt" @bind:format="yyyy-MM-ddTHH:mm" type="datetime-local" class="form-control" />
                        </td>
                        <td class="align-middle">
                            <input @bind="vm.QuestionSet.EndAt" @bind:format="yyyy-MM-ddTHH:mm" type="datetime-local" class="form-control" />
                        </td>
                        <td class="btn-group align-middle" role="group" aria-label="Actions">
                            <button @onclick="() => UpdateQuestionSetSchedule(vm)" class="btn btn-primary">Submit</button>
                            <button @onclick="() => vm.IsEditing = false" class="btn btn-danger">Cancel</button>
                        </td>
                    }
                    else
                    {
                        <td class="align-middle">@(vm.QuestionSet.StartAt?.ToString("U") ?? "-")</td>
                        <td class="align-middle">@(vm.QuestionSet.EndAt?.ToString("U") ?? "-")</td>
                        <td class="align-middle">
                            <button @onclick="() => vm.IsEditing = true" class="btn btn-secondary">Edit</button>
                        </td>
                    }
                </tr>
            }
        </tbody>
    </table>
</div>

@code {
    public List<QuestionSetViewModel> QuestionSetViewModels = new();

    protected override Task OnInitializedAsync()
    {
        QuestionSetViewModels = Context.QuestionSets
            .Select(questionSet => new QuestionSetViewModel { QuestionSet = questionSet })
            .ToList();

        return base.OnInitializedAsync();
    }

    public void UpdateQuestionSetSchedule(QuestionSetViewModel vm)
    {
        vm.IsEditing = false;
        Context.Update(vm.QuestionSet);
        Context.SaveChangesAsync();
    }
}
