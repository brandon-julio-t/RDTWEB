@page "/ManageQuestions"
@attribute [Authorize(Roles = "Admin")]
@inject ApplicationDbContext _context

<h3>Manage Questions</h3>

<NavLink href="ManageQuestions/Create" class="btn btn-primary my-4">Create New Question Set</NavLink>

<div class="table-responsive">
    <table class="table table-hover">
        <thead>
        <tr>
            <th>ID</th>
            <th>Title</th>
            <th>Start</th>
            <th>End</th>
            <th>Actions</th>
        </tr>
        </thead>
        <tbody>
        <Virtualize Items="QuestionSetViewModels">
            <ItemContent>
                <tr>
                    <td class="align-middle">@context.QuestionSet.Id</td>
                    <td class="align-middle">@context.QuestionSet.Title</td>
                    <td class="align-middle">@(context.QuestionSet.StartAt?.ToString() ?? "-")</td>
                    <td class="align-middle">@(context.QuestionSet.EndAt?.ToString() ?? "-")</td>
                    <td class="align-middle">
                        <div class="btn-group" role="group" aria-label="Actions">
                            <NavLink class="btn btn-secondary" href="@($"/ManageQuestions/{context.QuestionSet.Id}")">View</NavLink>
                            <button @onclick="() => OnDelete(context)" class="btn btn-danger">Delete</button>
                        </div>
                    </td>
                </tr>
            </ItemContent>
            <Placeholder>
                <tr>
                    <td colspan="5">
                        <div class="d-flex justify-content-center">
                            <div class="spinner-border" style="width: 3rem; height: 3rem;" role="status">
                                <span class="sr-only">Loading...</span>
                            </div>
                        </div>
                    </td>
                </tr>
            </Placeholder>
        </Virtualize>

        </tbody>
    </table>
</div>

@code {
    private List<QuestionSetViewModel> QuestionSetViewModels { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        QuestionSetViewModels = await _context.QuestionSets
            .Select(questionSet => new QuestionSetViewModel {QuestionSet = questionSet})
            .ToListAsync();
    }

    private async Task OnDelete(QuestionSetViewModel vm)
    {
        _context.Remove(vm.QuestionSet);
        await _context.SaveChangesAsync();

        QuestionSetViewModels.Remove(vm);
        StateHasChanged();
    }

}