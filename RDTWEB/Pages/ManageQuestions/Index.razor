@page "/ManageQuestions"
@attribute [Authorize(Roles = "Admin")]
@inject ApplicationDbContext _context

<h3>Manage Questions</h3>

<NavLink href="/ManageQuestions/Create" class="btn btn-primary">Create New Question Set</NavLink>

<div class="table-responsive">
    <table class="table table-hover">
        <thead>
        <tr>
            <th>ID</th>
            <th>Title</th>
            <th>Start</th>
            <th>End</th>
            <th>Actions</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var vm in QuestionSetViewModels)
        {
            <tr>
                <td class="align-middle">@vm.QuestionSet.Id</td>
                <td class="align-middle">@vm.QuestionSet.Title</td>
                <td class="align-middle">@(vm.QuestionSet.StartAt?.ToString() ?? "-")</td>
                <td class="align-middle">@(vm.QuestionSet.EndAt?.ToString() ?? "-")</td>
                <td class="align-middle">
                    <div class="btn-group" role="group" aria-label="Actions">
                        <NavLink class="btn btn-secondary" href="@($"/ManageQuestions/{vm.QuestionSet.Id}")">View</NavLink>
                        <button @onclick="() => OnDelete(vm)" class="btn btn-danger">Delete</button>
                    </div>
                </td>
            </tr>
        }
        </tbody>
    </table>
</div>

@code {
    private List<QuestionSetViewModel> QuestionSetViewModels { get; set; } = new();

    protected override Task OnInitializedAsync()
    {
        QuestionSetViewModels = _context.QuestionSets
            .Select(questionSet => new QuestionSetViewModel {QuestionSet = questionSet})
            .ToList();

        return base.OnInitializedAsync();
    }

    private void RefreshQuestionSets()
    {
        QuestionSetViewModels = _context.QuestionSets
            .Select(questionSet => new QuestionSetViewModel {QuestionSet = questionSet})
            .ToList();
    }

    private void OnDelete(QuestionSetViewModel vm)
    {
        QuestionSetViewModels.Remove(vm);
        _context.Remove(vm.QuestionSet);
        _context.SaveChangesAsync();
    }

}