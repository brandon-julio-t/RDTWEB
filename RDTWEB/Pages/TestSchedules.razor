@page "/TestSchedules"
@attribute [Authorize(Roles = "Admin, Participant")]

@inject ApplicationDbContext _context
@inject AuthenticationStateProvider _authenticationStateProvider
@inject UserManager<IdentityUser> _userManager

<MudText Class="mb-4" Typo="Typo.h3">Test Schedules</MudText>

<ServerTime/>

<MudSimpleTable Hover="true" Striped="true">
    <thead>
    <tr>
        <th>Title</th>
        <th>Start At</th>
        <th>End At</th>
        <th>Status</th>
        <th>Actions</th>
    </tr>
    </thead>
    <tbody>
    <Virtualize Items="QuestionSets">
        <tr style="@GetTrClassByStatus(context)">
            <td class="align-middle">@context.Title</td>
            <td class="align-middle">@context.StartAt?.ToString("U")</td>
            <td class="align-middle">@context.EndAt?.ToString("U")</td>
            <td class="align-middle">@context.Status</td>
            <td class="align-middle">
                @if (context.Status == "Ongoing")
                {
                    <MudButton Link="@($"/TestAnswer/{context.Id}")" Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Create">
                        Answer
                    </MudButton>
                }
                else
                {
                    <span>-</span>
                }
            </td>
        </tr>
    </Virtualize>
    </tbody>
</MudSimpleTable>

@code {

    private List<QuestionSet> QuestionSets { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        QuestionSets = await _context.QuestionSets
            .Where(questionSet => questionSet.StartAt != null)
            .Where(questionSet => questionSet.EndAt != null)
            .OrderByDescending(questionSet => questionSet.StartAt)
            .ToListAsync();

        var auth = await _authenticationStateProvider.GetAuthenticationStateAsync();
        var userId = _userManager.GetUserId(auth.User);

        QuestionSets.ForEach(questionSet => questionSet.UpdateStatusByUserId(userId));
    }

    private static string GetTrClassByStatus(QuestionSet questionSet)
    {
        return questionSet.Status switch { "Ongoing" => $"color:{Colors.Shades.White};background-color:{Colors.Green.Default};", _ => "" };
    }

}