@page "/TestSchedules"
@attribute [Authorize(Roles = "Admin, Participant")]

@inject ApplicationDbContext _context
@inject AuthenticationStateProvider _authenticationStateProvider
@inject UserManager<IdentityUser> _userManager

<h3>Test Schedules</h3>

<ServerTime/>

<div class="table-responsive">
    <table class="table table-hover">
        <thead>
        <tr>
            <th>Title</th>
            <th>Start At</th>
            <th>End At</th>
            <th>Status</th>
            <th>Actions</th>
        </tr>
        </thead>
        <tbody>
        <Virtualize Items="QuestionSets">
            <ItemContent>
                <tr class="@GetTrClassByStatus(context)">
                    <td class="align-middle">@context.Title</td>
                    <td class="align-middle">@context.StartAt?.ToString("U")</td>
                    <td class="align-middle">@context.EndAt?.ToString("U")</td>
                    <td class="align-middle">@context.Status</td>
                    <td class="align-middle">
                        @if (context.Status == "Ongoing")
                        {
                            <NavLink href="@($"/TestAnswer/{context.Id}")" class="btn btn-primary">Answer</NavLink>
                        }
                        else
                        {
                            <span>-</span>
                        }
                    </td>
                </tr>
            </ItemContent>
            <Placeholder>
                <tr>
                    <td colspan="5">
                        <div class="d-flex justify-content-center">
                            <div class="spinner-border" style="width: 3rem; height: 3rem;" role="status">
                                <span class="sr-only">Loading...</span>
                            </div>
                        </div>
                    </td>
                </tr>
            </Placeholder>
        </Virtualize>
        </tbody>
    </table>
</div>

@code {
    private List<QuestionSet> QuestionSets { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        QuestionSets = await _context.QuestionSets
            .Where(questionSet => questionSet.StartAt != null)
            .Where(questionSet => questionSet.EndAt != null)
            .OrderByDescending(questionSet => questionSet.StartAt)
            .ToListAsync();

        var auth = await _authenticationStateProvider.GetAuthenticationStateAsync();
        var userId = _userManager.GetUserId(auth.User);

        QuestionSets.ForEach(questionSet => questionSet.UpdateStatusByUserId(userId));
    }

    private static string GetTrClassByStatus(QuestionSet questionSet) =>
        questionSet.Status switch { "Ongoing" => "bg-success text-white", _ => "" };

}