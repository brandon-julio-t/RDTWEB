@page "/AnswersCorrection"
@attribute [Authorize(Roles = "Admin")]
@inject ApplicationDbContext _context

<MudText Class="mb-4" Typo="Typo.h3">Answers Correction</MudText>

<MudGrid>
    <MudItem xs="6">
        <MudText Class="my-2" Typo="Typo.h4">Pending Correction Answers</MudText>
    </MudItem>
    <MudItem xs="6">
        <MudText Class="my-2" Typo="Typo.h4">Corrected Answers</MudText>
    </MudItem>
</MudGrid>

<MudGrid>
    <MudItem xs="6">
        @{
            var n1 = 0;
            var lim1 = PendingCorrectionAnswers.Count;
        }

        <Virtualize Items="PendingCorrectionAnswers">
            <AnswersCorrectionItem Answer="@context" Number="@(n1++ % lim1 + 1)" OnCorrected="@StateHasChanged"/>
        </Virtualize>
    </MudItem>
    <MudItem xs="6">
        @{
            var n2 = 0;
            var lim2 = CorrectedAnswers.Count;
        }

        <Virtualize Items="CorrectedAnswers">
            <AnswersCorrectionItem Answer="@context" Number="@(n2++ % lim2 + 1)" OnCorrected="@StateHasChanged"/>
        </Virtualize>
    </MudItem>
</MudGrid>

@code {

    private List<Answer> Answers { get; set; } = new();
    private List<Answer> CorrectedAnswers => Answers.Where(answer => answer.IsCorrect != null).ToList();
    private List<Answer> PendingCorrectionAnswers => Answers.Where(answer => answer.IsCorrect == null).ToList();

    protected override async Task OnInitializedAsync()
    {
        Answers = await _context.Answers
            .Include(answer => answer.Question)
            .Where(answer => new[] {"Essay", "Submit File"}.Contains(answer.Question.Type))
            .Where(answer => answer.StringAnswer != null)
            .OrderByDescending(answer => answer.Question.Id)
            .ToListAsync();
    }

}