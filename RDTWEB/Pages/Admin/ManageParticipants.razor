@page "/ManageParticipants"
@using Microsoft.Extensions.Configuration
@using InputType = MudBlazor.InputType

@attribute [Authorize(Roles = "Admin")]

@inject UserManager<IdentityUser> _userManager
@inject IConfiguration _config
@inject ISnackbar _snackbar

<MudGrid>
    <MudItem xs="7">
        <MudPaper Class="p-4">
            <MudText Class="mb-4" Typo="Typo.h3">Participants</MudText>

            <MudSimpleTable Hover="true" Striped="true">
                <thead>
                <tr>
                    <th>ID</th>
                    <th>Email</th>
                    <th>Actions</th>
                </tr>
                </thead>
                <tbody>
                <Virtualize Items="Users">
                    <tr>
                        <td class="align-middle">@context.Id</td>
                        <td class="align-middle">@context.Email</td>
                        <td class="align-middle">
                            <MudButton OnClick="() => DeleteUser(context)" Variant="Variant.Filled" Color="Color.Error" StartIcon="@Icons.Material.Filled.Delete">
                                Delete
                            </MudButton>
                        </td>
                    </tr>
                </Virtualize>
                </tbody>
            </MudSimpleTable>
        </MudPaper>
    </MudItem>
    <MudItem xs="5">
        <MudPaper Class="p-4">
            <div style="position: sticky; top: 73px;">
                <MudText Class="mb-4" Typo="Typo.h3">Create Participants</MudText>

                <EditForm Model="@FormModel" OnSubmit="@CreateUser">
                    <MudTextField @bind-Value="FormModel.Username" Class="mb-4" Variant="Variant.Text" Label="Email" InputType="InputType.Email" FullWidth="true"></MudTextField>

                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Send">
                        Submit
                    </MudButton>
                </EditForm>
            </div>
        </MudPaper>
    </MudItem>
</MudGrid>

@code {

    private List<IdentityUser> Users { get; set; } = new();

    private CreateUserForm FormModel { get; } = new();

    protected override async Task OnInitializedAsync()
    {
        Users = (await _userManager.GetUsersInRoleAsync("Participant")).ToList();
    }

    private async Task CreateUser()
    {
        if (string.IsNullOrWhiteSpace(FormModel.Username))
        {
            _snackbar.Add("Email must be filled!", Severity.Error);
            return;
        }

        var user = new IdentityUser
        {
            UserName = FormModel.Username,
            Email = FormModel.Username,
            EmailConfirmed = true
        };

        await _userManager.CreateAsync(user, _config["DefaultPassword"]);
        await _userManager.AddToRoleAsync(user, "Participant");

        Users.Add(user);
        FormModel.Username = "";
        _snackbar.Add("Participant created.", Severity.Success);
        StateHasChanged();
    }

    private async Task DeleteUser(IdentityUser user)
    {
        await _userManager.DeleteAsync(user);
        Users.Remove(user);
        StateHasChanged();
    }

    public class CreateUserForm
    {
        public string Username { get; set; }
    }

}