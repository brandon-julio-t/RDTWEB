@page "/ManageQuestions/{id?}"
@attribute [Authorize(Roles = "Admin")]
@inject ApplicationDbContext _context
@inject ISnackbar _snackbar

@if (IsEditing)
{
    <MudTextField @bind-Value="QuestionSet.Title" Label="Question Set Title" Variant="Variant.Text" FullWidth="true"/>
}
else
{
    <MudText Class="mb-4" Typo="Typo.h3">@QuestionSet.Title</MudText>
}

@{
    var n = 0;
    var lim = QuestionSet.Questions.Count;
}

<Virtualize Items="QuestionSet.Questions">
    <ViewQuestion Question="@context" Number="@(n++ % lim + 1)" OnDelete="OnQuestionDeleted"/>
</Virtualize>

<MudGrid>
    @if (IsEditing)
    {
        <MudItem>
            <MudButton OnClick="AddQuestion" Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add">
                Add Question
            </MudButton>
        </MudItem>
        <MudItem>
            <MudButton OnClick="UpdateQuestionSet" Variant="Variant.Filled" Color="Color.Success" StartIcon="@Icons.Material.Filled.Save">
                Save
            </MudButton>
        </MudItem>
        <MudItem>
            <MudButton OnClick="() => IsEditing = false" Variant="Variant.Filled" Color="Color.Error" StartIcon="@Icons.Material.Filled.Cancel">
                Cancel
            </MudButton>
        </MudItem>
    }
    else
    {
        <MudItem>
            <MudButton OnClick="() => IsEditing = true" Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Edit">
                Edit
            </MudButton>
        </MudItem>
        <MudItem>
            <MudButton Link="ManageQuestions" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.ArrowBack">
                Back
            </MudButton>
        </MudItem>
    }
</MudGrid>

@code {

    [Parameter]
    public string Id { get; set; }

    private QuestionSet QuestionSet { get; set; } = new();
    private bool IsEditing { get; set; }

    protected override async Task OnInitializedAsync()
    {
        QuestionSet = await _context.QuestionSets
            .Include(questionSet => questionSet.Questions.OrderBy(question => question.Id))
            .SingleOrDefaultAsync(questionSet => questionSet.Id.ToString() == Id);
    }

    private void AddQuestion()
    {
        QuestionSet.Questions.Add(new Question());
    }

    private void OnQuestionDeleted(Question question)
    {
        QuestionSet.Questions.Remove(question);
    }

    private async Task UpdateQuestionSet()
    {
        _context.Update(QuestionSet);
        await _context.SaveChangesAsync();

        IsEditing = false;
        StateHasChanged();

        _snackbar.Add("Update success.", Severity.Success);
    }

}