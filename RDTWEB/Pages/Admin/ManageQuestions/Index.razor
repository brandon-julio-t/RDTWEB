@page "/ManageQuestions"
@attribute [Authorize(Roles = "Admin")]
@inject ApplicationDbContext _context

<MudText Class="mb-4" Typo="Typo.h3">Manage Questions</MudText>

<MudButton Class="my-4" Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" Link="ManageQuestions/Create">
    Create New Question Set
</MudButton>

<MudSimpleTable Hover="true" Striped="true">
    <thead>
    <tr>
        <th>ID</th>
        <th>Title</th>
        <th>Start</th>
        <th>End</th>
        <th>Actions</th>
    </tr>
    </thead>
    <tbody>
    <Virtualize Items="QuestionSetViewModels">
        <tr>
            <td class="align-middle">@context.QuestionSet.Id</td>
            <td class="align-middle">@context.QuestionSet.Title</td>
            <td class="align-middle">@(context.QuestionSet.StartAt?.ToString() ?? "-")</td>
            <td class="align-middle">@(context.QuestionSet.EndAt?.ToString() ?? "-")</td>
            <td class="align-middle">
                <MudGrid>
                    <MudItem>
                        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Details" Link="@($"/ManageQuestions/{context.QuestionSet.Id}")">
                            View
                        </MudButton>
                    </MudItem>
                    <MudItem>
                        <MudButton OnClick="() => OnDelete(context)" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error">
                            Delete
                        </MudButton>
                    </MudItem>
                </MudGrid>
            </td>
        </tr>
    </Virtualize>
    </tbody>
</MudSimpleTable>

@code {

    private List<QuestionSetViewModel> QuestionSetViewModels { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        QuestionSetViewModels = await _context.QuestionSets
            .Select(questionSet => new QuestionSetViewModel {QuestionSet = questionSet})
            .ToListAsync();
    }

    private async Task OnDelete(QuestionSetViewModel vm)
    {
        _context.Remove(vm.QuestionSet);
        await _context.SaveChangesAsync();

        QuestionSetViewModels.Remove(vm);
        StateHasChanged();
    }

}