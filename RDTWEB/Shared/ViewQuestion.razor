@inject ApplicationDbContext _context

<div class="my-4 p-4 border rounded">
    @if (IsEditing)
    {
        <div class="form-group">
            <input @bind-value="@Question.Body" type="text" class="form-control" placeholder="Question Body"/>
        </div>

        <div class="form-group">
            <select @onchange="e => ChangeQuestionType(Question, e.Value?.ToString())" type="text" class="form-control" placeholder="Question Body">
                <option selected='@(Question.Type == "Multiple Choice")'>Multiple Choice</option>
                <option selected='@(Question.Type == "Boolean (true or false)")'>Boolean (true or false)</option>
                <option selected='@(Question.Type == "Multiple Answer List")'>Multiple Answer List</option>
                <option selected='@(Question.Type == "Essay")'>Essay</option>
                <option selected='@(Question.Type == "Submit File")'>Submit File</option>
            </select>
        </div>

        @switch (Question.Type)
        {
            case "Multiple Choice":
                @for (var i = 0; i < 4; i++)
                {
                    var idx = i;

                    <div class="form-group form-inline">
                        <input @onchange="() => Question.CorrectChoiceIndex = idx" checked="@(Question.CorrectChoiceIndex == idx)" class="form-check-input" type="checkbox"/>
                        <input @bind-value="@Question.Choices[idx]" type="text" class="form-control flex-fill" placeholder="Choice #@(idx + 1)"/>
                    </div>
                }
                break;

            case "Boolean (true or false)":
                <div class="form-group">
                    <div class="form-check form-check-inline">
                        <input @onchange="() => Question.BooleanAnswer = true" checked="@Question.BooleanAnswer" class="form-check-input" type="radio" id="true">
                        <label class="form-check-label" for="true">True</label>
                    </div>
                    <div class="form-check form-check-inline">
                        <input @onchange="() => Question.BooleanAnswer = false" checked="@(!Question.BooleanAnswer)" class="form-check-input" type="radio" id="false">
                        <label class="form-check-label" for="false">False</label>
                    </div>
                </div>
                break;

            case "Multiple Answer List":
                @for (var i = 0; i < Question.Choices.Count; i++)
                {
                    var idx = i;

                    <div class="form-group form-inline">
                        <input @onchange="() => Question.CorrectChoiceIndex = idx" checked="@(Question.CorrectChoiceIndex == idx)" class="form-check-input" type="checkbox"/>
                        <input @bind-value="@Question.Choices[idx]" type="text" class="form-control flex-fill" placeholder="Multiple Answer Choice #@(idx + 1)"/>
                    </div>
                }

                <div class="form-group">
                    <button @onclick='() => Question.Choices.Add("")' class="btn btn-outline-secondary">Add Answer</button>
                </div>
                break;
        }

        @if (!IsNew)
        {
            <button @onclick="OnEditingDone" class="btn btn-success">Done</button>
            <button @onclick="() => IsEditing = false" class="btn btn-danger">Cancel</button>
        }
    }
    else
    {
        <p class="font-weight-bold">@Number. @Question.Body [@Question.Type]</p>

        @switch (Question.Type)
        {
            case "Multiple Choice":
            case "Multiple Answer List":
                @for (var i = 0; i < Question.Choices.Count; i++)
                {
                    var idx = i;

                    <div class="form-group form-inline">
                        <input disabled checked="@(Question.CorrectChoiceIndex == idx)" class="form-check-input" type="checkbox"/>
                        <input disabled value="@Question.Choices[idx]" type="text" class="form-control flex-fill" placeholder="Multiple Answer Choice #@(idx + 1)"/>
                    </div>
                }
                break;
            case "Boolean (true or false)":
                <div class="form-group">
                    <div class="form-check form-check-inline">
                        <input disabled checked="@Question.BooleanAnswer" class="form-check-input" type="radio" id="true">
                        <label class="form-check-label" for="true">True</label>
                    </div>
                    <div class="form-check form-check-inline">
                        <input disabled checked="@(!Question.BooleanAnswer)" class="form-check-input" type="radio" id="false">
                        <label class="form-check-label" for="false">False</label>
                    </div>
                </div>
                break;
        }

        @if (!IsNew)
        {
            <div class="btn-group" role="group" aria-label="Actions">
                <button @onclick="() => IsEditing = true" class="btn btn-secondary">Edit</button>
                <button @onclick="DeleteQuestion" class="btn btn-danger">Delete</button>
            </div>
        }
    }
</div>

@code {

    [Parameter]
    public Question Question { get; set; }

    [Parameter]
    public int Number { get; set; }

    [Parameter]
    public bool IsEditing { get; set; }

    [Parameter]
    public bool IsNew { get; set; }

    [Parameter]
    public EventCallback<Question> OnDelete { get; set; }

    private void ChangeQuestionType(Question question, string type)
    {
        question.Type = type;
        question.Choices = new List<string>();
        question.CorrectChoiceIndex = -1;

        var choicesCount = type switch 
        {
            "Multiple Choice" => 4,
            "Multiple Answer List" => 1,
            _ => 0
            };

        for (var i = 0; i < choicesCount; i++)
        {
            question.Choices.Add("");
        }
    }

    private void OnEditingDone()
    {
        IsEditing = false;

    // if question is new, it will be saved together with Question Set
        if (IsNew) return;

        _context.Update(Question);
        _context.SaveChangesAsync();
    }

    private void DeleteQuestion()
    {
        _context.Remove(Question);
        _context.SaveChangesAsync();
        OnDelete.InvokeAsync(Question);
    }

}