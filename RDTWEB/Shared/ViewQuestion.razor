@inject ApplicationDbContext _context

<MudPaper Class="my-4 p-4">
    @if (IsEditing)
    {
        <MudTextField Class="my-4" @bind-Value="Question.Body" Variant="Variant.Text" Label="Question Body" FullWidth="true"/>

        <MudSelect Class="my-4" T="string" ValueChanged="e => ChangeQuestionType(Question, e)" Label="Question Type" SelectedValues="@(new HashSet<string> {Question.Type})" FullWidth="true">
            <MudSelectItem Value="@("Multiple Choice")"/>
            <MudSelectItem Value="@("Boolean (true or false)")"/>
            <MudSelectItem Value="@("Multiple Answer List")"/>
            <MudSelectItem Value="@("Essay")"/>
            <MudSelectItem Value="@("Submit File")"/>
        </MudSelect>

        @switch (Question.Type)
        {
            case "Multiple Choice":
                @for (var i = 0; i < 4; i++)
                {
                    var idx = i;

                    <div class="form-group form-inline">
                        <input @onchange="() => Question.CorrectChoiceIndex = idx" checked="@(Question.CorrectChoiceIndex == idx)" class="form-check-input" type="checkbox"/>
                        <input @bind-value="@Question.Choices[idx]" type="text" class="form-control flex-fill" placeholder="Choice #@(idx + 1)"/>
                    </div>
                }
                break;

            case "Boolean (true or false)":
                <div class="form-group">
                    <div class="form-check form-check-inline">
                        <input @onchange="() => Question.BooleanAnswer = true" checked="@Question.BooleanAnswer" class="form-check-input" type="radio" id="true">
                        <label class="form-check-label" for="true">True</label>
                    </div>
                    <div class="form-check form-check-inline">
                        <input @onchange="() => Question.BooleanAnswer = false" checked="@(!Question.BooleanAnswer)" class="form-check-input" type="radio" id="false">
                        <label class="form-check-label" for="false">False</label>
                    </div>
                </div>
                break;

            case "Multiple Answer List":
                @for (var i = 0; i < Question.Choices.Count; i++)
                {
                    var idx = i;

                    <div class="form-group form-inline">
                        <input @onchange="() => Question.CorrectChoiceIndex = idx" checked="@(Question.CorrectChoiceIndex == idx)" class="form-check-input" type="checkbox"/>
                        <input @bind-value="@Question.Choices[idx]" type="text" class="form-control flex-fill" placeholder="Multiple Answer Choice #@(idx + 1)"/>
                    </div>
                }

                <MudButton OnClick='() => Question.Choices.Add("")' Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add">
                    Add Answer
                </MudButton>
                break;
        }

        @if (!IsNew)
        {
            <MudGrid>
                <MudItem>
                    <MudButton OnClick="OnEditingDone" Variant="Variant.Filled" Color="Color.Success" StartIcon="@Icons.Material.Filled.Done">
                        Done
                    </MudButton>
                </MudItem>
                <MudItem>
                    <MudButton OnClick="() => IsEditing = false" Variant="Variant.Filled" Color="Color.Error" StartIcon="@Icons.Material.Filled.Cancel">
                        Cancel
                    </MudButton>
                </MudItem>
            </MudGrid>
        }
    }
    else
    {
        <MudText Class="mb-4" Typo="Typo.body1">@Number. @Question.Body [@Question.Type]</MudText>

        @switch (Question.Type)
        {
            case "Multiple Choice":
            case "Multiple Answer List":
                @for (var i = 0; i < Question.Choices.Count; i++)
                {
                    var idx = i;

                    <div class="form-group form-inline">
                        <input disabled checked="@(Question.CorrectChoiceIndex == idx)" class="form-check-input" type="checkbox"/>
                        <input disabled value="@Question.Choices[idx]" type="text" class="form-control flex-fill" placeholder="Multiple Answer Choice #@(idx + 1)"/>
                    </div>
                }
                break;
            case "Boolean (true or false)":
                <div class="form-group">
                    <div class="form-check form-check-inline">
                        <input disabled checked="@Question.BooleanAnswer" class="form-check-input" type="radio" id="true">
                        <label class="form-check-label" for="true">True</label>
                    </div>
                    <div class="form-check form-check-inline">
                        <input disabled checked="@(!Question.BooleanAnswer)" class="form-check-input" type="radio" id="false">
                        <label class="form-check-label" for="false">False</label>
                    </div>
                </div>
                break;
        }

        @if (!IsNew)
        {
            <MudGrid Class="mt-4">
                <MudItem>
                    <MudButton OnClick="() => IsEditing = true" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Edit">
                        Edit
                    </MudButton>
                </MudItem>
                <MudItem>
                    <MudButton OnClick="DeleteQuestion" Variant="Variant.Filled" Color="Color.Error" StartIcon="@Icons.Material.Filled.Delete">
                        Delete
                    </MudButton>
                </MudItem>
            </MudGrid>
        }
    }
</MudPaper>

@code {

    [Parameter]
    public Question Question { get; set; }

    [Parameter]
    public int Number { get; set; }

    [Parameter]
    public bool IsEditing { get; set; }

    [Parameter]
    public bool IsNew { get; set; }

    [Parameter]
    public EventCallback<Question> OnDelete { get; set; }

    private void ChangeQuestionType(Question question, string type)
    {
        question.Type = type;
        question.Choices = new List<string>();
        question.CorrectChoiceIndex = -1;

        var choicesCount = type switch 
        {
            "Multiple Choice" => 4,
            "Multiple Answer List" => 1,
            _ => 0
            };

        for (var i = 0; i < choicesCount; i++)
        {
            question.Choices.Add("");
        }
    }

    private void OnEditingDone()
    {
        IsEditing = false;

    // if question is new, it will be saved together with Question Set
        if (IsNew) return;

        _context.Update(Question);
        _context.SaveChangesAsync();
    }

    private void DeleteQuestion()
    {
        _context.Remove(Question);
        _context.SaveChangesAsync();
        OnDelete.InvokeAsync(Question);
    }

}